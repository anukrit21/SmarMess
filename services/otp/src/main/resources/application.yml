spring:
  application:
    name: otp-service
  config:
    import: optional:configserver:http://localhost:8888
  cloud:
    config:
      fail-fast: false
      retry:
        initial-interval: 1500
        max-attempts: 10000
        max-interval: 3000
  datasource:
    url: jdbc:postgresql://localhost:5432/demoapp_otp
    username: postgres
    password: Nut@n803212
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
  kafka:
    bootstrap-servers: ${KAFKA_SERVERS:localhost:9092}
    consumer:
      group-id: otp-service-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: com.demoApp.*
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME:dummy_email@gmail.com}
    password: ${MAIL_PASSWORD:dummy_password}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

server:
  port: 8776
  error:
    include-message: always
    include-binding-errors: always

jwt:
  secret: defaultSecretKey12345678901234567890
  expiration: 86400000

twilio:
  account:
    sid: ${TWILIO_ACCOUNT_SID:dummySid}
  auth:
    token: ${TWILIO_AUTH_TOKEN:dummyToken}
  phone:
    number: ${TWILIO_PHONE_NUMBER:'+10000000000'}
  verify:
    service:
      sid: ${TWILIO_VERIFY_SERVICE_SID:dummyVerifySid}

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
  instance:
    prefer-ip-address: true
    hostname: ${spring.application.name}

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  health:
    circuitbreakers:
      enabled: true

resilience4j:
  circuitbreaker:
    instances:
      otpService:
        slidingWindowSize: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 10000
        permittedNumberOfCallsInHalfOpenState: 3
  retry:
    instances:
      otpService:
        maxAttempts: 3
        waitDuration: 1000
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2

app:
  otp:
    expiration: 300000
    length: 6


logging:
  level:
    com.demoApp.otp: DEBUG
    org.springframework.security: INFO
    org.springframework: INFO
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    org.springframework.web: INFO
