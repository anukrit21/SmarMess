package com.demoApp.mess.service;

import com.demoApp.mess.dto.*;
import com.demoApp.mess.entity.Mess;
import com.demoApp.mess.exception.DuplicateResourceException;
import com.demoApp.mess.exception.ResourceNotFoundException;
import com.demoApp.mess.model.Menu;
import com.demoApp.mess.repository.MessRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.modelmapper.ModelMapper;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
public class MessService {

    private final MessRepository messRepository;
    private final PasswordEncoder passwordEncoder;
    private final ModelMapper modelMapper;

    public List<MessDTO> getAllMesses() {
        log.debug("Getting all messes");
        return messRepository.findAll().stream()
                .map(this::convertToMessDTO)
                .collect(Collectors.toList());
    }
    
    private MessDTO convertToMessDTO(Mess mess) {
        MessDTO dto = new MessDTO();
        dto.setId(mess.getId());
        dto.setName(mess.getName());
        dto.setEmail(mess.getEmail());
        dto.setContactNumber(mess.getContactNumber());
        dto.setLocation(mess.getLocation());
        dto.setApproved(mess.isApproved());
        return dto;
    }
    
    public List<MessDTO> getApprovedMesses() {
        log.debug("Getting approved messes");
        return messRepository.findByApproved(true).stream()
                .map(this::convertToMessDTO)
                .collect(Collectors.toList());
    }
    
    public List<MessDTO> getPendingMesses() {
        log.debug("Getting pending messes");
        return messRepository.findByApproved(false).stream()
                .map(this::convertToMessDTO)
                .collect(Collectors.toList());
    }
    
    public MessDTO getMessById(Long id) {
        log.debug("Getting mess by ID: {}", id);
        return messRepository.findById(id)
                .map(this::convertToMessDTO)
                .orElseThrow(() -> new ResourceNotFoundException("Mess not found with ID: " + id));
    }
    
    public MessDTO getMessByEmail(String email) {
        log.debug("Getting mess by email: {}", email);
        return messRepository.findByEmail(email)
                .map(this::convertToMessDTO)
                .orElseThrow(() -> new ResourceNotFoundException("Mess not found with email: " + email));
    }
    
    public boolean existsByEmail(String email) {
        log.debug("Checking if mess exists by email: {}", email);
        return messRepository.existsByEmail(email);
    }
    
    @Transactional
    public MessDTO createMess(MessCreateDTO request) {
        log.debug("Creating new mess with email: {}", request.getEmail());

        if (messRepository.existsByEmail(request.getEmail())) {
            throw new DuplicateResourceException("Mess with email " + request.getEmail() + " already exists");
        }

        Mess mess = new Mess();
        mess.setName(request.getName());
        mess.setEmail(request.getEmail());
        mess.setPassword(passwordEncoder.encode(request.getPassword()));
        mess.setContactNumber(request.getContactNumber());
        mess.setLocation(request.getLocation());
        mess.setDescription(request.getDescription());
        mess.setOpeningTime(request.getOpeningTime());
        mess.setClosingTime(request.getClosingTime());
        mess.setApproved(false);
        mess.setActive(true);

        Mess savedMess = messRepository.save(mess);
        log.info("Created new mess with ID: {}", savedMess.getId());

        return convertToMessDTO(savedMess);
    }

    @Transactional
    public MessDTO updateMess(Long id, MessUpdateDTO request) {
        log.debug("Updating mess with ID: {}", id);

        Mess mess = messRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Mess not found with ID: " + id));

        // Update fields if provided in the request
        if (request.getName() != null) {
            mess.setName(request.getName());
        }
        if (request.getContactNumber() != null) {
            mess.setContactNumber(request.getContactNumber());
        }
        if (request.getLocation() != null) {
            mess.setLocation(request.getLocation());
        }
        if (request.getDescription() != null) {
            mess.setDescription(request.getDescription());
        }
        if (request.getOpeningTime() != null) {
            mess.setOpeningTime(request.getOpeningTime());
        }
        if (request.getClosingTime() != null) {
            mess.setClosingTime(request.getClosingTime());
        }

        Mess updatedMess = messRepository.save(mess);
        log.info("Updated mess with ID: {}", updatedMess.getId());

        return convertToMessDTO(updatedMess);
    }

    @Transactional
    public MessDTO getMess(Long id) {
        log.debug("Getting mess with ID: {}", id);

        Mess mess = messRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Mess not found with ID: " + id));

        return convertToMessDTO(mess);
    }

    @Transactional
    public Mess approveMess(Long id) {
        log.debug("Approving mess with ID: {}", id);

        Mess mess = messRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Mess not found with ID: " + id));

        mess.setApproved(true);
        return messRepository.save(mess);
    }

    @Transactional
    public void deleteMess(Long id) {
        log.debug("Deleting mess with ID: {}", id);

        Mess mess = messRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Mess not found with ID: " + id));

        messRepository.delete(mess);
    }

    public List<Mess> getActiveMesses() {
        log.debug("Getting active messes");
        return messRepository.findByActive(true);
    }

    @Transactional
    public Mess deactivateMess(Long id) {
        log.debug("Deactivating mess with ID: {}", id);

        Mess mess = messRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Mess not found with ID: " + id));

        mess.setActive(false);
        return messRepository.save(mess);
    }

    @Transactional
    public MenuItemDTO addMenuItem(Long messId, MenuItemCreateDTO request) {
        log.debug("Adding menu item to mess with ID: {}", messId);
        
        Mess mess = messRepository.findById(messId)
                .orElseThrow(() -> new ResourceNotFoundException("Mess not found with ID: " + messId));
        
        // Create a new menu item
        Menu menuItem = new Menu();
        menuItem.setName(request.getName());
        menuItem.setDescription(request.getDescription());
        menuItem.setBasePrice(request.getPrice().doubleValue());
        menuItem.setVeg(request.getIsVegetarian());
        menuItem.setAvailable(true);
        menuItem.setMess(mess);
        
        // Save the menu item (this would be done in a MenuRepository in a real implementation)
        // For this example, we'll just return a DTO
        MenuItemDTO dto = new MenuItemDTO();
        dto.setId(1L); // Placeholder ID
        dto.setName(menuItem.getName());
        dto.setDescription(menuItem.getDescription());
        dto.setPrice(menuItem.getBasePrice());
        dto.setVegetarian(menuItem.isVeg());
        dto.setAvailable(menuItem.isAvailable());
        
        return dto;
    }

    @Transactional
    public MenuItemDTO updateMenuItem(Long messId, Long menuItemId, MenuItemUpdateDTO request) {
        log.debug("Updating menu item {} for mess with ID: {}", menuItemId, messId);
        
        // In a real implementation, you would fetch the menu item from a repository
        // and update it based on the request
        
        // For this example, we'll just return a DTO with the updated values
        MenuItemDTO dto = new MenuItemDTO();
        dto.setId(menuItemId);
        dto.setName(request.getName());
        dto.setDescription(request.getDescription());
        dto.setPrice(request.getPrice().doubleValue());
        dto.setVegetarian(request.getIsVegetarian());
        dto.setAvailable(request.getIsAvailable());
        
        return dto;
    }

    public List<MenuItemDTO> getMessMenu(Long messId) {
        log.debug("Getting menu for mess with ID: {}", messId);
        
        // Check if mess exists
        messRepository.findById(messId)
                .orElseThrow(() -> new ResourceNotFoundException("Mess not found with ID: " + messId));
        
        // In a real implementation, you would fetch menu items from a repository
        // For this example, we'll just return a sample list
        List<MenuItemDTO> menuItems = new ArrayList<>();
        
        // Sample menu item 1
        MenuItemDTO item1 = new MenuItemDTO();
        item1.setId(1L);
        item1.setName("Veg Thali");
        item1.setDescription("Complete vegetarian meal");
        item1.setPrice(120.0);
        item1.setVegetarian(true);
        item1.setAvailable(true);
        menuItems.add(item1);
        
        // Sample menu item 2
        MenuItemDTO item2 = new MenuItemDTO();
        item2.setId(2L);
        item2.setName("Non-Veg Thali");
        item2.setDescription("Complete non-vegetarian meal");
        item2.setPrice(150.0);
        item2.setVegetarian(false);
        item2.setAvailable(true);
        menuItems.add(item2);
        
        return menuItems;
    }

    public MessAnalyticsDTO getAnalytics(Long messId, LocalDateTime startDate, LocalDateTime endDate) {
        log.debug("Getting analytics for mess with ID: {} from {} to {}", messId, startDate, endDate);
        
        // Check if mess exists
        messRepository.findById(messId)
                .orElseThrow(() -> new ResourceNotFoundException("Mess not found with ID: " + messId));
        
        // In a real implementation, you would calculate analytics based on actual data
        // For this example, we'll just return sample data
        
        Map<String, Long> categoryDistribution = new HashMap<>();
        categoryDistribution.put("Main Course", 10L);
        categoryDistribution.put("Starters", 5L);
        categoryDistribution.put("Desserts", 3L);
        categoryDistribution.put("Beverages", 2L);
        
        Map<String, Long> priceRangeDistribution = new HashMap<>();
        priceRangeDistribution.put("0-50", 3L);
        priceRangeDistribution.put("51-100", 10L);
        priceRangeDistribution.put("101-200", 7L);
        
        MessAnalyticsDTO analyticsDTO = new MessAnalyticsDTO();
        analyticsDTO.setTotalMenuItems(20);
        analyticsDTO.setAvailableItems(15);
        analyticsDTO.setCategoryDistribution(categoryDistribution);
        analyticsDTO.setPriceRangeDistribution(priceRangeDistribution);
        analyticsDTO.setVegetarianRatio(0.6);
        
        return analyticsDTO;
    }
}
